-- For this project, I downloaded Spotify data from Kaggle and performed analytics using SQL. 
-- The process involved creating a table to store the data, inserting the dataset, and then running several queries to analyze different aspects of the music dataset.

-- Step 1: Creating the Table. To begin, I created a table in the database to store Spotify's dataset. Below is the SQL script for the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- Step 2: Inserting the Dataset. I inserted the Spotify dataset from Kaggle into the table created above.

-- Step 3: Data Exploration. Below are the queries I executed and their purpose:

#Query 1: Top 10 Artists with the Highest Average Danceability. This query identifies the top 10 artists whose songs have the highest average danceability scores.
SELECT ROUND(AVG(danceability), 2) AS danceability_style, artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY danceability_style DESC
LIMIT 10;

#Query 2: Top 15 Artists Based on Average Popularity. This query highlights the 15 most popular artists based on the average popularity of their songs.
SELECT artist_name, ROUND(AVG(popularity), 2) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 15;

#Query 3: Longest Song and Its Duration. This query identifies the longest song in the dataset, its artist, and its duration.
SELECT track_name, artist_name, duration_ms
FROM BIT_DB.Spotifydata
WHERE duration_ms = (SELECT MAX(duration_ms) FROM BIT_DB.Spotifydata);

#Query 4: Average Danceability of the 10 Most Popular Songs. This query calculates the average danceability score of the 10 most popular songs.
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE danceability IN (SELECT danceability FROM BIT_DB.Spotifydata ORDER BY danceability DESC LIMIT 10);

#Query 5: Least 10 Energy Songs and Their Popularity. This query lists the 10 songs with the lowest energy, including their energy levels and popularity scores.
SELECT track_name, energy, popularity 
FROM BIT_DB.Spotifydata
ORDER BY energy ASC
LIMIT 10;

#Query 6: Songs with High Danceability and Low Valence. This query identifies songs with high danceability (>0.8) but low valence (<0.5), suggesting they are energetic yet melancholic.
SELECT track_name, artist_name, danceability, valence
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8 AND valence < 0.5;


#Project Insights
#Artists with high average danceability often dominate certain playlists, suggesting their suitability for specific mood-based genres.
#Popularity does not always correlate with energy or danceability; some slower, softer songs can also achieve high popularity.
#The dataset provides insights into song characteristics that could help in designing playlists or understanding listener preferences.
